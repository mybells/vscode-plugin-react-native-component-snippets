{
  "ActivityIndicator": {
    "prefix": "$ActivityIndicator",
    "body": ["<ActivityIndicator color=\"${2:#000}\" />"],
    "description": "显示一个圆形的 loading 提示符号"
  },
  "Button": {
    "prefix": "$Button",
    "body": ["<Button onPress={()=>{${1}}} title=\"${2}\" />"],
    "description": "一个简单的跨平台的按钮组件"
  },
  "DatePickerIOS": {
    "prefix": "$DatePickerIOS",
    "body": ["<DatePickerIOS date={${1}} onDateChange={${2}} />"],
    "description": "使用DatePickerIOS来在 iOS 平台上渲染一个日期/时间选择器"
  },
  "DrawerLayoutAndroid": {
    "prefix": "$DrawerLayoutAndroid",
    "body": ["<DrawerLayoutAndroid renderNavigationView={() => {${1}}} >${2}</DrawerLayoutAndroid>"],
    "description": "封装了 Android 平台DrawerLayout的 React 组件。"
  },
  "FlatList": {
    "prefix": "$FlatList",
    "body": ["<FlatList data={${1}} renderItem={({item,index}) => {${2}}} keyExtractor={(item, index) => index} />"],
    "description": "高性能的简单列表组件。"
  },
  "Image": {
    "prefix": "$Image",
    "body": ["<Image style={{width: 50, height: 50}} source={require(\"${1}\")} />"],
    "description": "用于显示多种不同类型图片的 React 组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。"
  },
  "ImageBackground": {
    "prefix": "$ImageBackground",
    "body": ["<ImageBackground style={{width: \"100%\", height: \"100%\"}} source={require(\"${1}\")} />"],
    "description": "熟悉Web的开发人员通常要求的功能是background-image。"
  },
  "KeyboardAvoidingView ": {
    "prefix": "$KeyboardAvoidingView",
    "body": ["<KeyboardAvoidingView>${1}</KeyboardAvoidingView>"],
    "description": "自动根据键盘的位置，调整自身的 height 或底部的 padding，以避免被遮挡。"
  },
  "MaskedViewIOS": {
    "prefix": "$MaskedViewIOS",
    "body": ["<MaskedViewIOS maskElement={${1}} />"],
    "description": "渲染一个带蒙版的视图。"
  },
  "Modal": {
    "prefix": "$Modal",
    "body": ["<Modal visible={${1}} onRequestClose={() => {${2}}} />"],
    "description": "Modal 组件是一种简单的覆盖在其他视图之上显示内容的方式。"
  },
  "Picker ": {
    "prefix": "$Picker",
    "body": [
      "<Picker selectedValue={${1}} onValueChange={(itemValue, itemIndex) => {}>",
      "\t<Picker.Item label=\"${3}\" value=\"${4}\" />",
      "</Picker>"
    ],
    "description": "本组件可以在 iOS 和 Android 上渲染原生的选择器（Picker）。"
  },
  "ProgressBarAndroid": {
    "prefix": "$ProgressBarAndroid",
    "body": ["<ProgressBarAndroid progress={${1}}/>"],
    "description": "封装了Android平台上的ProgressBar的React组件。这个组件可以用来表示应用正在加载或者有些事情正在进行中。"
  },
  "ProgressViewIOS": {
    "prefix": "$ProgressViewIOS",
    "body": ["<ProgressViewIOS progress={${1}}/>"],
    "description": "使用ProgressViewIOS来在iOS上渲染一个UIProgressView。"
  },
  "RefreshControl": {
    "prefix": "$RefreshControl",
    "body": ["<RefreshControl refreshing={${1}} onRefresh={${2}} />"],
    "description": "这一组件可以用在ScrollView或FlatList内部，为其添加下拉刷新的功能。"
  },
  "SafeAreaView": {
    "prefix": "$SafeAreaView",
    "body": ["<SafeAreaView style={{flex: 1, backgroundColor: '#fff'}}>", "\t${1}", "</SafeAreaView>"],
    "description": "SafeAreaView的目的是在一个“安全”的可视区域内渲染内容。本组件目前仅支持 iOS 设备以及 iOS 11 或更高版本。"
  },
  "ScrollView": {
    "prefix": "$ScrollView",
    "body": ["<ScrollView contentContainerStyle={{flex:1}}>", "\t${1}", "</ScrollView>"],
    "description": "一个封装了平台的ScrollView（滚动视图）的组件，同时还集成了触摸锁定的“响应者”系统。"
  },
  "SectionList": {
    "prefix": "$SectionList",
    "body": [
      "<SectionList sections={${3}} renderItem={({ item, index, section }) => {${1}}} renderSectionHeader={${2}} keyExtractor={(item, index) => index} />"
    ],
    "description": "高性能的分组(section)列表组件"
  },
  "SegmentedControlIOS": {
    "prefix": "$SegmentedControlIOS",
    "body": ["<SegmentedControlIOS values={${1}} selectedIndex={${2}} onChange={(event) => {}} />"],
    "description": "使用SegmentedControlIOS来在 iOS 设备上渲染一个UISegmentedControl组件。这是一个分段显示多个选项的组件。"
  },
  "Slider": {
    "prefix": "$Slider",
    "body": ["<Slider values={${1}} maximumValue={${2}} minimumValue={${3}} onValueChange={() => {}} step={${4}} />"],
    "description": "用于选择一个范围值的组件。"
  },
  "StatusBar": {
    "prefix": "$StatusBar",
    "body": ["<StatusBar barStyle=\"${1|light-content,dark-content|}\" />"],
    "description": "控制应用状态栏的组件。"
  },
  "StyleSheet": {
    "prefix": "$StyleSheet",
    "body": ["const styles = StyleSheet.create({", "\tcontainer: {", "\t\tborderWidth: StyleSheet.hairlineWidth", "\t},", "\t${1}", "});"],
    "description": "StyleSheet提供了一种类似CSS样式表的抽象。"
  },
  "Switch": {
    "prefix": "$Switch",
    "body": ["<Switch value={${1}} onValueChange={(val)=>{${2}}} />"],
    "description": "跨平台通用的“开关”组件。"
  },
  "Text": {
    "prefix": "$Text",
    "body": ["<Text style={{${2}}} numberOfLines={1}>$1</Text>"],
    "description": "一个用于显示文本的React组件"
  },
  "TextInput": {
    "prefix": "$TextInput",
    "body": ["<TextInput value={${1}} onChangeText={(val)=>{this.setState({${2}})}} style={{${3}}} />"],
    "description": "TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。"
  },

  "View": {
    "prefix": "$View",
    "body": ["<View>", "\t${1}", "</View>"],
    "description": "View 是一个支持 Flexbox 布局、样式、一些触摸处理、和一些无障碍功能的容器"
  },
  "TouchableOpacity": {
    "prefix": "$TouchableOpacity",
    "body": ["<TouchableOpacity onPress={() => {${2}}} activeOpacity={0.8} style={{}} >", "\t${1}", "</TouchableOpacity>"],
    "description": "本组件用于封装视图，使其可以正确响应触摸操作。当按下的时候，封装的视图的不透明度会降低。"
  },
  "Style": {
    "prefix": "$Style",
    "body": ["style={{${1}}}"],
    "description": "样式变量"
  }
}
